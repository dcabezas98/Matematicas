return( list( progresion=progresion[1:t], # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
particula(20)
warnings()
particula <- function(lim=10000){
P=c(0,0)
t=2
progresion=rep(c(0,0),lim)
while (t<=lim){
P=desplazamiento(P) # Desplazamiento
cat('IIIIIIIIIIIIII')
cat(P)
cat(progresion[t])
progresion[t]=P     # Guardo sucesión
cat(progresion[t])
if (abs(P[1])>100){ # Condición de parada
break
}
t=t+1
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
return( list( progresion=progresion[1:t], # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
particula(20)
particula <- function(lim=10000){
P=c(0,0)
t=2
progresion=rep(c(0,0),lim)
while (t<=lim){
P=desplazamiento(P) # Desplazamiento
cat('IIIIIIIIIIIIII')
cat(P)
cat(progresion[t])
progresion[t]=P     # Guardo sucesión
cat(progresion[t])
cat('\n')
if (abs(P[1])>100){ # Condición de parada
break
}
t=t+1
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
return( list( progresion=progresion[1:t], # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
particula(20)
warnings()
desplazamiento(c(0,0))
particula <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=desplazamiento(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=x,y=y)
return( list( progresion=progresion[1:t], # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
# Función que simula un desplazamiento
desplazamiento <- function(x,y) {
dados = sample(6,3,T) # Lanzo los tres dados
if (dados[1]<=2){ # Si primer dado es 1 ó 2, una unidad a la derecha
x=x+1
}
else{ # Si no, una a la izquierda
x=x-1
}
if (dados[2]+dados[3]<5){ # Si la suma de los dados 2 y 3 es menor  que 5, una unidad hacia arriba
y=y+1
}
else{ # Si no, una hacia abajo
y=y-1
}
return(c(x,y)) # Devuelvo el punto actualizado
}
desplazamiento(c(0,0))
desplazamiento(x,y)
# Función que simula un desplazamiento
desplazamiento <- function(x,y) {
dados = sample(6,3,T) # Lanzo los tres dados
if (dados[1]<=2){ # Si primer dado es 1 ó 2, una unidad a la derecha
x=x+1
}
else{ # Si no, una a la izquierda
x=x-1
}
if (dados[2]+dados[3]<5){ # Si la suma de los dados 2 y 3 es menor  que 5, una unidad hacia arriba
y=y+1
}
else{ # Si no, una hacia abajo
y=y-1
}
return(c(x,y)) # Devuelvo el punto actualizado
}
desplazamiento(x,y)
desplazamiento(0,0)
desplazamiento(0,0)
desplazamiento(0,0)
desplazamiento(0,0)
particula <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=desplazamiento(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=x,y=y)
return( list( progresion=progresion[1:t], # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
particula(20)
desplazamiento(0,0)
particula <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=desplazamiento(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=x,y=y)
return( list( progresion=progresion, # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
particula(20)
particula <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=desplazamiento(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
cat(prograsionX)
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=x,y=y)
return( list( progresion=progresion, # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
particula(20)
particula <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=desplazamiento(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
cat(progresionX)
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=x,y=y)
return( list( progresion=progresion, # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
particula(20)
desplazamiento(0,0)
particula <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=desplazamiento(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
cat(progresionX)
cat('\n')
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=x,y=y)
return( list( progresion=progresion, # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
particula(20)
particula <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=desplazamiento(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
cat(progresionX)
cat('\n')
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
cat(progresionX[1:5])
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=x,y=y)
return( list( progresion=progresion, # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
particula(20)
particula <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=desplazamiento(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=progresionX,y=progresionY)
return( list( progresion=progresion, # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
particula(20)
particula <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=desplazamiento(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=progresionX,y=progresionY)
return( list( progresion=progresion, # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
particula()
# Función que simula un paso
paso <- function(x,y) {
dados = sample(6,3,T) # Lanzo los tres dados
if (dados[1]<=2){ # Si primer dado es 1 ó 2, una unidad a la derecha
x=x+1
}
else{ # Si no, una a la izquierda
x=x-1
}
if (dados[2]+dados[3]<5){ # Si la suma de los dados 2 y 3 es menor  que 5, una unidad hacia arriba
y=y+1
}
else{ # Si no, una hacia abajo
y=y-1
}
return(c(x,y)) # Devuelvo el punto actualizado
}
paso(0,0)
# Función que simula el movimiento
desplazamiento <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=paso(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=progresionX,y=progresionY)
return( list( progresion=progresion, # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
desplazamiento()
# Función que simula el movimiento
desplazamiento <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=paso(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=progresionX,y=progresionY)
return( list( progresion=progresion, # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
resultado
resultado=desplazamiento()
resultado
resultado
resultado=desplazamiento(300)
resultado
resultado=desplazamiento(300)
resultado
resultado=desplazamiento(300)
resultado
resultado=desplazamiento(300)
resultado
resultado=desplazamiento(300)
resultado
resultado=desplazamiento(300)
resultado
resultado=desplazamiento(300)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
# REpresentación del movimiento con flechas
library("ggplot2")
# REpresentación del movimiento con flechas
library("ggplot2")
install.packages("ggplot2")
resultado
# REpresentación del movimiento con flechas
library("ggplot2")
library(grid) # needed for arrow function
library(data.table)
# see http://docs.ggplot2.org/current/geom_segment.html
df <- data.frame(a=c(1,2,3,4,5,6),T=c(3.88,3.92,3.96,4.00,4.04,4.08),X=c(2.7,2.9,2.7,2.0,2.7,2.0),Y=c(675.0,600.7,675.0,690.0,675.0,680.4),V=c(27.0,42,55,55,55,42),GD=c(27,70,125,181,236,279),ND=c(NA,2.7,0,0,0,5.4),ND2=c(NA,7,0,0,0,29.2),TID="t1")
qplot(X, Y, data = df, color = TID, group = TID)+
geom_path(linetype=5, size=1.5, arrow=arrow(angle=15, ends="both", type="closed"))+
geom_point (shape=19, size=5, fill="black")
set.seed(18)
# Función que simula una realización del experimento.
# Es más cómodo trabajar con datos numéricos pongamos que el 0 es cara y el 1 es cruz
monedas <- function(){
return( sample(c(0,1),2,T,c(1,1)) )  # Devuelve un vector con los resultados de los dos lanzamientos
}
monedas()
resultados=c(0,0,0) # Para contar el número de veces que se da cada resultado
repeticiones=15000
for (i in 1:repeticiones) {
i = sum(monedas())+1 # Posición 1 para doble cara, posición 2 para una cara y una cruz y posición 3 para doble cruz
resultados[i]=resultados[i]+1
}
resultados                      # En mi simulación: 3741 7496 3763
sum(resultados) # Deben sumar 15000
