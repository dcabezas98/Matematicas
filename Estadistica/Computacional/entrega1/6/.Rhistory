geom_point (shape='.', size=1, fill="black")
library(grid) # needed for arrow function
library(data.table)
# see http://docs.ggplot2.org/current/geom_segment.html
qplot(x, y, data = resultado$progresion)+
geom_path(linetype=1, size=0.5, arrow=arrow(angle=15, length=unit(0.1,'inches'), ends='last', type="closed"), color='red')+
geom_point (shape='.', size=1, fill="black")
n <- 10000
df <- data.frame(x=1:n, y=runif(n))
pl <- ggplot(df) +
geom_point(aes(x,y), size=1,shape=".") + labs(title="shape='.',size=1")
pl
# REpresentación del movimiento con flechas
library("ggplot2")
library(grid) # needed for arrow function
library(data.table)
# see http://docs.ggplot2.org/current/geom_segment.html
qplot(x, y, data = resultado$progresion)+
geom_path(linetype=1, size=0.5, arrow=arrow(angle=15, length=unit(0.1,'inches'), ends='last', type="closed"), color='red')+
geom_point (aes(x,y), shape='.', size=1, fill="black")
# see http://docs.ggplot2.org/current/geom_segment.html
qplot(x, y, data = resultado$progresion)+
geom_path(linetype=1, size=0.5, arrow=arrow(angle=15, length=unit(0.05,'inches'), ends='last', type="closed"), color='red')+
geom_point (aes(x,y), shape='.', size=1, fill="black")
n <- 10000
library(grid) # needed for arrow function
library(data.table)
# see http://docs.ggplot2.org/current/geom_segment.html
qplot(x, y, data = resultado$progresion)+
geom_path(linetype=1, size=0.5, arrow=arrow(angle=15, length=unit(0.08,'inches'), ends='last', type="closed"), color='red')+
geom_point (aes(x,y), shape='.', size=1, fill="black")
# Función que simula un paso
paso <- function(x,y) {
dados = sample(6,3,T) # Lanzo los tres dados
if (dados[1]<=2){ # Si primer dado es 1 ó 2, una unidad a la derecha
x=x+1
}
else{ # Si no, una a la izquierda
x=x-1
}
if (dados[2]+dados[3]<5){ # Si la suma de los dados 2 y 3 es menor  que 5, una unidad hacia arriba
y=y+1
}
else{ # Si no, una hacia abajo
y=y-1
}
return(c(x,y)) # Devuelvo el punto actualizado
}
paso(0,0)
# Función que simula el movimiento
desplazamiento <- function(lim=10000){
x=0
y=0
t=2
progresionX=rep(0,lim)
progresionY=rep(0,lim)
while (t<=lim){
P=paso(x,y) # Desplazamiento
x=P[1]
y=P[2]
progresionX[t]=x     # Guardo sucesión
progresionY[t]=y
if (abs(x)>100){ # Condición de parada
break
}
t=t+1
}
salida=t<=lim # Si no llegó al límite, alcanzó la condición de salida
if (!salida){ # Si llega al limite no se procesa el ultimo valor de t
t=t-1
}
progresionX=progresionX[1:t]
progresionY=progresionY[1:t]
progresion=data.frame(x=progresionX,y=progresionY)
return( list( progresion=progresion, # Hasta donde recorrió, lo demás son ceros
pasos=t-1, # Número de desplazamientos, llamadas a la función desplazamiento
salida=salida
) )
}
resultado=desplazamiento(10000)
resultado
# Representación del movimiento con flechas
library("ggplot2")
library(grid) # needed for arrow function
library(data.table)
# see http://docs.ggplot2.org/current/geom_segment.html
qplot(x, y, data = resultado$progresion)+
geom_path(linetype=1, size=0.5, arrow=arrow(angle=15, length=unit(0.08,'inches'), ends='last', type="closed"), color='red')+
geom_point (aes(x,y), shape='.', size=1, fill="black")
n <- 10000
df <- data.frame(x=1:n, y=runif(n))
n <- 10000
df <- data.frame(x=1:n, y=runif(n))
pl <- ggplot(df) +
geom_point(aes(x,y), size=1,shape=".") + labs(title="shape='.',size=1")
pl
n <- 10000
df <- data.frame(x=1:500, y=runif(500))
pl <- ggplot(df) +
geom_point(aes(x,y), size=1,shape=".") + labs(title="shape='.',size=1")
pl
n <- 10000
df <- data.frame(x=1:50, y=runif(50))
pl <- ggplot(df) +
geom_point(aes(x,y), size=1,shape=".") + labs(title="shape='.',size=1")
pl
n <- 10000
df <- data.frame(x=1:6, y=runif(6))
pl <- ggplot(df) +
geom_point(aes(x,y), size=1,shape=".") + labs(title="shape='.',size=1")
pl
# Representación del movimiento con flechas
library("ggplot2")
library(grid) # needed for arrow function
library(data.table)
# see http://docs.ggplot2.org/current/geom_segment.html
qplot(x, y, data = resultado$progresion)+
geom_path(linetype=1, size=0.5, arrow=arrow(angle=15, length=unit(0.08,'inches'), ends='last', type="closed"), color='red')+
geom_point (aes(x,y), shape='.', size=1)
plot(resultado$progresion$x,resultado$progresion$y,type='o')
plot(resultado$progresion$x,resultado$progresion$y,type='o')
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado
# Representación del movimiento con flechas
library("ggplot2")
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
resultado=desplazamiento(10000)
resultado
plot(resultado$progresion$x,resultado$progresion$y,type='o')
# see http://docs.ggplot2.org/current/geom_segment.html
qplot(x, y, data = resultado$progresion)+
geom_path(linetype=1, size=0.5, arrow=arrow(angle=15, length=unit(0.08,'inches'), ends='last', type="closed"), color='red')+
geom_point (shape='.', size=1)
# Representación del movimiento con un camino terminado en flecha
# Código modificado de https://stackoverflow.com/questions/16571390/making-a-trajectory-plot-using-r
library("ggplot2")
library(grid) # needed for arrow function
library(data.table)
# see http://docs.ggplot2.org/current/geom_segment.html
qplot(x, y, data = resultado$progresion)+
geom_path(linetype=1, size=0.5, arrow=arrow(angle=15, length=unit(0.08,'inches'), ends='last', type="closed"), color='red')+
geom_point (shape='.', size=1)
lim=6
simular (A=0, B=0){
puntos=c(A,B)
while(puntos[1]<lim && puntos[2]<lim){ # Hasta que uno gane
ganador = sample(2,1,T)
puntos[ganador]=puntos[ganador]+1 # 1 punto para el ganador
}
if (puntos[1]==lim){ # Gana A
return('A')
}
else{ # Gana B
return('B')
}
}
simular (A=0, B=0){
puntos=c(A,B)
while(puntos[1]<lim && puntos[2]<lim){ # Hasta que uno gane
ganador = sample(2,1,T)
puntos[ganador]=puntos[ganador]+1 # 1 punto para el ganador
}
if (puntos[1]==lim){ # Gana A
return('A')
}
else{ # Gana B
return('B')
}
}
lim=6
simular <- function(A=0, B=0){
puntos=c(A,B)
while(puntos[1]<lim && puntos[2]<lim){ # Hasta que uno gane
ganador = sample(2,1,T)
puntos[ganador]=puntos[ganador]+1 # 1 punto para el ganador
}
if (puntos[1]==lim){ # Gana A
return('A')
}
else{ # Gana B
return('B')
}
}
simular(4,3)
simular(4,3)
simular(4,3)
simular(4,3)
simular(4,3)
simular(4,3)
simular(4,3)
simular(4,3)
simular(4,3)
simular(4,3)
partidas=98765
ganadas=repetir(partidas)
repetir <- function(n=10000){ # Simula n veces
ganadas=c(0,0)
for (i in 1:n){
ganador=simular(A=4,B=3)
ganadas[ganador]=ganadas[ganador+1] # Una partida ganada para el jugador 1 (A) o 2 (B)
}
return(ganadas)
}
partidas=98765
ganadas=repetir(partidas)
repetir <- function(n=10000){ # Simula n veces
ganadas=c(0,0)
for (i in 1:n){
ganador=simular(A=4,B=3)
ganadas[ganador]=ganadas[ganador]+1 # Una partida ganada para el jugador 1 (A) o 2 (B)
}
return(ganadas)
}
partidas=98765
ganadas=repetir(partidas)
ganadas[1]/partidas # Proporción de partidas ganadas por A
ganadas[2]/partidas # Proporción de partidas ganadas por B
simular(4,3)
repetir <- function(n=10000){ # Simula n veces
ganadas=c(0,0)
for (i in 1:n){
ganador=simular(A=4,B=3)
ganadas[ganador]=ganadas[ganador]+1 # Una partida ganada para el jugador 1 (A) o 2 (B)
}
return(ganadas)
}
partidas=98765
ganadas=repetir(partidas)
ganadas
lim=6
simular <- function(A=0, B=0){
puntos=c(A,B)
while(puntos[1]<lim && puntos[2]<lim){ # Hasta que uno gane
ganador = sample(2,1,T)
puntos[ganador]=puntos[ganador]+1 # 1 punto para el ganador de la ronda
}
if (puntos[1]==lim){ # Gana A, jugador 1
return(1)
}
else{ # Gana B, jugador 2
return(2)
}
}
simular(4,3)
repetir <- function(n=10000){ # Simula n veces
ganadas=c(0,0)
for (i in 1:n){
ganador=simular(A=4,B=3)
ganadas[ganador]=ganadas[ganador]+1 # Una partida ganada para el jugador 1 (A) o 2 (B)
}
return(ganadas)
}
partidas=98765
ganadas=repetir(partidas)
ganadas
ganadas[1]/partidas # Proporción de partidas ganadas por A
ganadas[2]/partidas # Proporción de partidas ganadas por B
# Los puntos en la interrupción y el total de lanzamientos acertados para ganar son arbitrarios
simular <- function(A=0, B=0, lim=6){
puntos=c(A,B)
while(puntos[1]<lim && puntos[2]<lim){ # Hasta que uno gane
ganador = sample(2,1,T)
puntos[ganador]=puntos[ganador]+1 # 1 punto para el ganador de la ronda
}
if (puntos[1]==lim){ # Gana A, jugador 1
return(1)
}
else{ # Gana B, jugador 2
return(2)
}
}
simular(4,3)
simular(4,3)
simular(4,3)
simular(4,3)
simular(4,3)
simular(4,1)
simular(4,1)
simular(4,1)
simular(4,1)
simular(4,1)
simular(4,1)
simular(4,1)
simular(4,1)
simular(4,1)
simular(4,1)
simular(4,1)
simular(4,1)
simular(4,1,1000)
simular(4,1,1000)
simular(4,1,1000)
simular(4,1,1000)
simular(4,1,1000)
simular(4,1,1000)
simular(4,1,1000)
simular(4,1,1000)
simular(4,1,1000)
simular(4,1,1000)
simular(4,1,1000)
simular(4,1,1000)
simular(4,1,1000)
seises()
seises <- function(n=4){
n_seises=0
for (i in 1:n){
dado=sample(6,1,T)
if(dado==6){
n_seises=n_seises+1
}
}
return(n_seises)
}
seises()
seises()
seises()
seises()
seises()
seises()
seises()
seises()
seises()
seises()
seises()
seises()
seises <- function(n=4){
n_seises=0
for (i in 1:n){
dado=sample(6,1,T)
if(dado==6){
n_seises=n_seises+1
}
}
return(n_seises)
}
seises()
# j veces la simulación
repetirSeises <- function(n=4, j=10000){
veces=rep(0,n) # Veces que se obtiene cada resultado
for (i in 1:j){
n_seises=seises(n)
veces[n_seises]=veces[n_seises]+1
}
}
veces=repetirSeises()
veces
seises()
# j veces la simulación
repetirSeises <- function(n=4, j=10000){
veces=rep(0,n) # Veces que se obtiene cada resultado
for (i in 1:j){
n_seises=seises(n)
veces[n_seises]=veces[n_seises]+1
}
return(veces)
}
veces=repetirSeises()
veces
veces
veces/10000
# j veces la simulación
repetirSeises <- function(n=4, j=10000){
veces=rep(0,n+1) # Veces que se obtiene cada resultado
for (i in 1:j){
n_seises=seises(n)
veces[n_seises+1]=veces[n_seises+1]+1
}
return(veces)
}
veces=repetirSeises()
veces
# Proporción con al menos 1 seis
1-veces[1]/10000 # Obtengo 0.3833
doblesSeises <- function(n=24){
n_doblesSeises=0
for (i in 1:n){
dados=sample(6,2,T) # Tiro dos dados
if(dados[1]+dados[2]==12){ # Si son dos seises ...
n_doblesSeises=n_doblesSeises+1
}
}
return(n_doblesSeises)
}
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises()
doblesSeises <- function(n=24){
n_doblesSeises=0
for (i in 1:n){
dados=sample(6,2,T) # Tiro dos dados
if(dados[1]+dados[2]==12){ # Si son dos seises ...
n_doblesSeises=n_doblesSeises+1
}
}
return(n_doblesSeises)
}
doblesSeises()
# j veces la simulación
repetirDoblesSeises <- function(n=4, j=100000){
veces=rep(0,n+1) # Veces que se obtiene cada resultado
for (i in 1:j){
n_dobles_seises=doblesSeises(n)
veces[n_dobles_seises+1]=veces[n_dobles_seises+1]+1 # 0 dobles seises en pos 1, 1 doble seis en pos 2, etc.
}
return(veces)
}
veces=repetirSeises()
veces
doblesSeises()
# j veces la simulación
repetirDoblesSeises <- function(n=24, j=100000){
veces=rep(0,n+1) # Veces que se obtiene cada resultado
for (i in 1:j){
n_dobles_seises=doblesSeises(n)
veces[n_dobles_seises+1]=veces[n_dobles_seises+1]+1 # 0 dobles seises en pos 1, 1 doble seis en pos 2, etc.
}
return(veces)
}
veces=repetirSeises()
veces
doblesSeises <- function(n=24){
n_doblesSeises=0
for (i in 1:n){
dados=sample(6,2,T) # Tiro dos dados
if(dados[1]+dados[2]==12){ # Si son dos seises ...
n_doblesSeises=n_doblesSeises+1
}
}
return(n_doblesSeises)
}
doblesSeises()
# j veces la simulación
repetirDoblesSeises <- function(n=24, j=100000){
veces=rep(0,n+1) # Veces que se obtiene cada resultado
for (i in 1:j){
n_dobles_seises=doblesSeises(n)
veces[n_dobles_seises+1]=veces[n_dobles_seises+1]+1 # 0 dobles seises en pos 1, 1 doble seis en pos 2, etc.
}
return(veces)
}
veces=repetirSeises()
veces
# j veces la simulación
repetirDoblesSeises <- function(n=24, j=100000){
veces=rep(0,n+1) # Veces que se obtiene cada resultado
for (i in 1:j){
n_dobles_seises=doblesSeises(n)
veces[n_dobles_seises+1]=veces[n_dobles_seises+1]+1 # 0 dobles seises en pos 1, 1 doble seis en pos 2, etc.
}
return(veces)
}
veces=repetirDoblesSeises()
veces
# Proporción con al menos 1 doble seis
1-veces[1]/100000 # Obtengo 0.5145. Difiere ligeramente de la prob. teórica, pero es muy similar
