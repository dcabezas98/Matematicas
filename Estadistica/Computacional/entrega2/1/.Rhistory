# Punto P
P=c(runif(min=-5,max=5),runif(min=1000,max=1010))
# Fijamos la semilla.
set.seed(18)
# Triángulo y cuadrado
plot(x=c(-2100,2100), y=c(-100,2100), type="n", xlab="", ylab="")
polygon(x=c(0,-2000,2000), y=c(2000,0,0), col="green")
polygon(x=c(-5,5,5,-5), y=c(1000,1000,1010,1010), col="red")
# Punto P
P=c(runif(min=-5,max=5),runif(min=1000,max=1010))
# Triángulo y cuadrado
plot(x=c(-2100,2100), y=c(-100,2100), type="n", xlab="", ylab="")
polygon(x=c(0,-2000,2000), y=c(2000,0,0), col="green")
polygon(x=c(-5,5,5,-5), y=c(1000,1000,1010,1010), col="red")
# Punto P
P=c(runif(1,min=-5,max=5),runif(1,min=1000,max=1010))
P
# Punto P
P=c(runif(1,min=-5,max=5),runif(1,min=1000,max=1010))
P
# Punto P
P=c(runif(1,min=-5,max=5),runif(1,min=1000,max=1010))
P
# Punto P
P=c(runif(1,min=-5,max=5),runif(1,min=1000,max=1010))
P
# Punto P
P=c(runif(1,min=-5,max=5),runif(1,min=1000,max=1010))
P
# Punto P
P=c(runif(1,min=-5,max=5),runif(1,min=1000,max=1010))
P
# Punto P
P=c(runif(1,min=-5,max=5),runif(1,min=1000,max=1010))
P
# Fijamos la semilla.
set.seed(18)
# Triángulo y cuadrado
plot(x=c(-2100,2100), y=c(-100,2100), type="n", xlab="", ylab="")
polygon(x=c(0,-2000,2000), y=c(2000,0,0), col="green")
polygon(x=c(-5,5,5,-5), y=c(1000,1000,1010,1010), col="red")
# Punto P: Elegido según una distribución uniforme en el cuadrado
P=c(runif(1,min=-5,max=5),runif(1,min=1000,max=1010))
P
library(ptinpoly)
library("ptinpoly")
movimiento<-function(inicio=c(0,1005), max=10000){
progresion=vector(length = max)
P=inicio
pasos=0
progresion[pasos+1]=P
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
}
pasos=pasos+1
progresion[pasos+1]=P
}
# Función auxiliar, comprueba si un punto está en el triangulo verde
dentro<-function(P){
return(P[1]>=0 && P[1]+P[2]<=2000 && P[2]-P[1]<=2000)
}
movimiento<-function(inicio=c(0,1005), max=10000){
progresion=vector(length = max)
P=inicio
pasos=0
progresion[pasos+1]=P
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresion[pasos+1]=P
}
return( list(pasos=pasos, progresion=progresion) )
}
P
mov=movimiento(P)
warnings()
progresionX=vector(mode="int",length = max)
movimiento<-function(inicio=c(0,1005), max=10000){
progresionX=vector(mode="int", length = max)
progresionY=vector(mode="int", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
return( list(pasos=pasos, progresion=progresion[1:pasos+1]) )
}
P
mov=movimiento(P)
P
mov=movimiento(P)
# Punto P: Elegido según una distribución uniforme en el cuadrado.
P=c(runif(1,min=-5,max=5),runif(1,min=1000,max=1010))
P
# Función auxiliar, comprueba si un punto está en el triangulo verde
dentro<-function(P){
return(P[1]>=0 && P[1]+P[2]<=2000 && P[2]-P[1]<=2000)
}
movimiento<-function(inicio=c(0,1005), max=10000){
progresionX=vector(mode="integer", length = max)
progresionY=vector(mode="intteger", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
movimiento<-function(inicio=c(0,1005), max=10000){
progresionX=vector(mode="integer", length = max)
progresionY=vector(mode="integer", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
mov$pasos
P
# Función auxiliar, comprueba si un punto está en el triangulo verde
dentro<-function(P){
return(P[2]>=0 && P[1]+P[2]<=2000 && P[2]-P[1]<=2000)
}
movimiento<-function(inicio=c(0,1005), max=10000){
progresionX=vector(mode="integer", length = max)
progresionY=vector(mode="integer", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
P
mov$pasos
mov=movimiento()
mov$pasos
mov=movimiento(P)
P
mov$pasos
mov$progresionY[pasos]
mov$progresionY[mov$pasos]
mov$progresionY[mov$pasos+1]
mov$progresionY[1:10]
mov$progresionY[1:100]
movimiento<-function(inicio=c(0,1005), max=10000){
progresionX=vector(mode="numeric", length = max)
progresionY=vector(mode="numeric", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
P
mov$progresionY[mov$pasos+1]
mov$progresionY[1:100]
mov$progresionX[mov$pasos+1]
mov$progresionX[mov$pasos]
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
movimiento<-function(inicio=c(0,1005), max=10000){
progresionX=vector(mode="numeric", length = max)
progresionY=vector(mode="numeric", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
P
mov$progresionY[mov$pasos]
mov$progresionY[mov$pasos-1]
mov$progresionY[mov$pasos+1]
mov$progresionY[mov$pasos+2]
mov$progresionY[mov$pasos]
length(mov$progresionX)
pasos
mov$pasos
length(mov$progresionX)
mov$pasos
movimiento<-function(inicio=c(0,1005), max=50000){
progresionX=vector(mode="numeric", length = max)
progresionY=vector(mode="numeric", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
P
mov$progresionY[mov$pasos]
length(mov$progresionX)
mov$pasos
mov$progresionY[1:100]
P
mov$progresionY[mov$pasos]
length(mov$progresionX)
mov$pasos
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
movimiento<-function(inicio=c(0,1005), max=50000){
progresionX=vector(mode="numeric", length = max)
progresionY=vector(mode="numeric", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
P
mov$progresionY[mov$pasos]
mov$progresionY[mov$pasos+1]
mov$progresionY[mov$pasos]
length(mov$progresionX)
mov$pasos
mov=movimiento(P)
P
mov$progresionY[1:10]
mov=movimiento(P)
P
mov$progresionY[1:10]
cat(progresionY[1])
movimiento<-function(inicio=c(0,1005), max=50000){
progresionX=vector(mode="numeric", length = max)
progresionY=vector(mode="numeric", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
cat(progresionY[1])
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
P
movimiento<-function(inicio=c(0,1005), max=50000){
progresionX=vector(mode="numeric", length = max)
progresionY=vector(mode="numeric", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
cat(progresionY[1])
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
cat(progresionY[1])
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
P
mov$progresionY[mov$pasos]
movimiento<-function(inicio=c(0,1005), max=50000){
progresionX=vector(mode="numeric", length = max)
progresionY=vector(mode="numeric", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
cat(progresionY[1])
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
cat(progresionY[1])
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
P
mov$progresionY[mov$pasos]
length(mov$progresionX)
movimiento<-function(inicio=c(0,1005), max=50000){
progresionX=vector(mode="numeric", length = max)
progresionY=vector(mode="numeric", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
#cat(progresionY[1])
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
cat(progresionY[1])
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
P
mov$progresionY[mov$pasos]
length(mov$progresionX)
mov$pasos
mov$progresionY[1:10]
# Función auxiliar, comprueba si un punto está en el triangulo verde
dentro<-function(P){
return(P[2]>=0 && P[1]+P[2]<=2000 && P[2]-P[1]<=2000)
}
movimiento<-function(inicio=c(0,1005), max=50000){
progresionX=vector(mode="numeric", length = max)
progresionY=vector(mode="numeric", length = max)
P=inicio
pasos=0
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
cat(progresionY[1])
while(dentro(P)){
dados=sample(6,3,T) # Resultado de los tres dados
if(dados[1]<=2 || dados[1]==6) # Si el primer dado es 1, 2 ó 6
P[1]=P[1]+1 # A la derecha
else
P[1]=P[1]-1 # A la derecha
if(dados[2]+dados[3]<7) # Si la suma del segundo dado y el tercero es menor que 7
P[2]=P[2]+1 # Hacia arriba
else
P[2]=P[2]-1 # Hacia abajo
pasos=pasos+1
progresionX[pasos+1]=P[1]
progresionY[pasos+1]=P[2]
}
cat(progresionY[1])
return( list(pasos=pasos, progresionX=progresionX[1:pasos+1], progresionY=progresionY[1:pasos+1]) )
}
mov=movimiento(P)
